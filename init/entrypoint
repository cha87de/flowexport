#!/bin/bash

# include bpkg  dependencies
source /usr/local/bin/retry
source /usr/local/bin/bgo
source /usr/local/bin/bgowait

##############################################################################
function validate(){
    vars="INTERFACE INTERVAL MODE"
    for var in $vars; do
        if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
            echo "$var not set but required."
            return 1
        fi
    done

    if [[ ! ($MODE == "text" || $MODE == "netflow" )  ]] ; then
            echo "mode must be text or netflow. unknown mode $mode."
            return 1    
    fi

    if [[ $MODE == "text" ]] ; then
        vars="MAXAGE"
        for var in $vars; do
            if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
                echo "$var not set but required."
                return 1
            fi
        done        
    fi

    if [[ $MODE == "netflow" ]] ; then
        vars="TARGET"
        for var in $vars; do
            if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
                echo "$var not set but required."
                return 1
            fi
        done        
    fi    

}

##############################################################################
function writeConfigOptions(){
    echo "write config options"
    export TARGET=$TARGET
    export INTERVAL=$INTERVAL
    cat /etc/docker-conf/pmacct.conf.tmpl \
        | envsubst > /etc/docker-conf/pmacct.conf
}
function init(){
    # write file based config options
    writeConfigOptions
}

##############################################################################
function start_nfcapd(){
    # start netflow collector
    nfcapd -b 127.0.0.1 -p 4433 -l /opt/flowexport/nfcapd -t $INTERVAL 2>&1 |  sed "s/^/[nfcapd] /"
}
function start_pmacctd-listener(){
    i=$1
    # start interface sniffer and netflow sender
    pmacctd -i $i -f /etc/docker-conf/pmacct.conf 2>&1 | sed "s/^/[pmacctd] /"
}
function start_pmacctd(){
    # find and start instance for each interface
    if [[ "$INTERFACE" =~ ^.*\* ]]; then
        # find matching interfaces
        echo "found wildcard interface" 2>&1 | sed "s/^/[pmacctd] /"
        interfaces=$(cat /proc/net/dev | awk -F': ' '{print $1}' | grep -e ^${INTERFACE})
        for i in $interfaces; do
            echo "found interface $i"
            bgo -g pmacctd "start_pmacctd-listener $i"
        done
        freq=1; waitForN=-1; killTasks=0 # ignore if one fails (might be gone)
        echo "waiting for pmacctd"
        bgowait -g pmacctd $freq $waitForN $killTasks
        echo "all pmacctd stopped."
    else
        # start listening on single interface
        echo "start listening on single interface $INTERFACE" 2>&1 | sed "s/^/[pmacctd] /"
        pmacctd -i $INTERFACE -f /etc/docker-conf/pmacct.conf 2>&1 | sed "s/^/[pmacctd] /"
    fi
}
function cleanup(){
    # remove dumps older than $MAXAGE days
    find /opt/flowexport/nfdump -maxdepth 1 -mtime +${MAXAGE} -type f -exec rm -rv {} \;
    # print dump size
    dumpsize=$(du /opt/flowexport/ -hs)
    echo "current dump size: $dumpsize" 2>&1 | sed "s/^/[flowexport] /"    
}
function start_nfdump(){
    # connect to netflow collector and dump to text files
    while true; do 
        sleep $INTERVAL
        (
            cd /opt/flowexport/nfcapd
            files=$(ls . | grep -v current) # all except nfcapd.current.14
            for file in $files; do
                newfile=$(echo $(hostname)_$(date +%Y-%m-%d-%H-%M-%S))
                nfdump -r $file -a > ../nfdump/$newfile
                gzip ../nfdump/$newfile
                echo "export file $newfile" 2>&1 | sed "s/^/[nfdump] /"
                rm $file
            done
        )
        cleanup
    done
}
function start_interfacechangedetector(){
    if [[ "$INTERFACE" =~ ^.*\* ]]; then

        interfaces=$(cat /proc/net/dev | awk -F': ' '{print $1}' | grep -e ^${INTERFACE})
        while true; do
            sleep $INTERVAL
            currentInterfaces=$(cat /proc/net/dev | awk -F': ' '{print $1}' | grep -e ^${INTERFACE})
            if [[ "$interfaces" != "$currentInterfaces" ]]; then
                echo "change in interfaces detected! need to be restarted." 2>&1 | sed "s/^/[interfacechangedetector] /"
                echo "previous interfaces: $interfaces - current interfaces: $currentInterfaces" 2>&1 | sed "s/^/[interfacechangedetector] /"
                return 0
            fi
        done

    else 
        # static interface defined - nothing to detect here
        while true; do sleep 10000; done
    fi
}
function start(){
    echo "starting applications... (mode: $MODE)"
    if [[ $MODE == "text" ]] ; then
        # start pmacctd and also nfdump to write text output
        bgo -g services start_nfcapd start_pmacctd start_nfdump start_interfacechangedetector
        if [[ $? != 0 ]]; then
            echo "start failed. exiting now." >&2
            exit 1
        fi        
    elif [[ $MODE == "netflow" ]] ; then
        # start only pmacctd
        bgo -g services start_pmacctd start_interfacechangedetector
        if [[ $? != 0 ]]; then
            echo "start failed. exiting now." >&2
            exit 1
        fi 
    fi
}

##############################################################################
function main(){
    # validate env vars
    validate
    if [[ $? != 0 ]]; then 
        echo "validation failed. exiting now." >&2
        exit 1
    fi

    # initialize
    init
    if [[ $? != 0 ]]; then 
        echo "init failed. exiting now." >&2
        exit 1
    fi

    # start
    start 
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi    

    # configure
    #retry 5 5 "configure failed." configure
    #if [[ $? != 0 ]]; then
    #    echo "cannot run configure." >&2
    #    exit 1
    #fi

    # wait
    echo "done. now waiting for services."
    #freq=5; waitForN=-1; killTasks=0 # fail one, ignore (development mode)
    freq=5; waitForN=1; killTasks=1 #fail one, fail all (production mode)
    bgowait -g services $freq $waitForN $killTasks
}

if [[ "$1" == "" ]]; then
    main
else
    exec "$@"
fi
