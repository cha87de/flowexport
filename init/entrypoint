#!/bin/bash

# include bpkg  dependencies
source /usr/local/bin/retry
source /usr/local/bin/bgo
source /usr/local/bin/bgowait

##############################################################################
# validate if all container variables are set
##############################################################################
function validate(){
    vars="INTERFACE INTERVAL MODE"
    for var in $vars; do
        if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
            echo "$var not set but required."
            return 1
        fi
    done

    if [[ ! ($MODE == "text" || $MODE == "netflow" )  ]] ; then
            echo "mode must be text or netflow. unknown mode $mode."
            return 1    
    fi

    if [[ $MODE == "text" ]] ; then
        vars="MAXAGE"
        for var in $vars; do
            if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
                echo "$var not set but required."
                return 1
            fi
        done        
    fi

    if [[ $MODE == "netflow" ]] ; then
        vars="TARGET"
        for var in $vars; do
            if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
                echo "$var not set but required."
                return 1
            fi
        done        
    fi    

}

##############################################################################
function start_nfcapd(){
    nfcapd -b 127.0.0.1 -p 4433 -l /opt/flowexport/nfcapd -t $INTERVAL 2>&1 |  sed "s/^/[nfcapd] /"
}
function start_softflowd-listener(){
    i=$1

    target="127.0.0.1:4433" # use local nfcapd as target by default
    if [[ $MODE == "netflow" ]] ; then
        target=$TARGET
    fi

    softflowd -i $i -p /var/run/softflowd-${i}.pid -c /var/run/softflowd-${i}.pid -d -v 9 -n $target 2>&1 | sed "s/^/[softflowd] /"
}
function start_softflowd-terminator(){
   i=$1
   sleep $INTERVAL
   softflowctl -c /var/run/softflowd-${i}.pid expire-all    | sed "s/^/[softflowd] /"
   softflowctl -c /var/run/softflowd-${i}.pid shutdown      | sed "s/^/[softflowd] /"
}
function start_softflowd(){
    if [[ "$INTERFACE" =~ ^.*\* ]]; then
        # find matching interfaces
        echo "found wildcard interface" 2>&1 | sed "s/^/[softflowd] /"
        while true; do 
            interfaces=$(ip -o link show | awk -F': ' '{print $2}' | grep $INTERFACE)
            for i in $interfaces; do
                echo "found interface $i"
                bgo -g softflowds "start_softflowd-listener $i"
                bgo -g softflowds "start_softflowd-terminator $i"
            done
            freq=1; waitForN=-1; killTasks=0 # fail one, ignore
            bgowait -g softflowds $freq $waitForN $killTasks
        done            
    else
        # start listening on single interface
        echo "start listening on single interface $INTERFACE" 2>&1 | sed "s/^/[softflowd] /"
        softflowd -i $INTERFACE -d -n 127.0.0.1:4433 2>&1 | sed "s/^/[softflowd] /"
    fi
}
function cleanup(){
    # remove dumps older than $MAXAGE days
    find /opt/flowexport/nfdump -maxdepth 1 -mtime +${MAXAGE} -type f -exec rm -rv {} \;
    # print dump size
    dumpsize=$(du /opt/flowexport/ -hs)
    echo "current dump size: $dumpsize" 2>&1 | sed "s/^/[flowexport] /"    
}
function start_nfdump(){
    while true; do 
        sleep $INTERVAL
        (
            cd /opt/flowexport/nfcapd
            files=$(ls . | grep -v current) # all except nfcapd.current.14
            for file in $files; do
                newfile=$(echo $(hostname)_$(date +%Y-%m-%d-%H-%M-%S))
                nfdump -r $file -a > ../nfdump/$newfile
                gzip ../nfdump/$newfile
                echo "export file $newfile" 2>&1 | sed "s/^/[nfdump] /"
                rm $file
            done
        )
        cleanup
    done
}
function start(){
    echo "starting applications... (mode: $MODE)"
    if [[ $MODE == "text" ]] ; then
        # start softflowd and also nfdump to write text output
        bgo -g services start_nfcapd start_softflowd start_nfdump
        if [[ $? != 0 ]]; then
            echo "start failed. exiting now." >&2
            exit 1
        fi        
    elif [[ $MODE == "netflow" ]] ; then
        # start only softflowd
        bgo -g services start_softflowd
        if [[ $? != 0 ]]; then
            echo "start failed. exiting now." >&2
            exit 1
        fi 
    fi
}

##############################################################################
function main(){
    # validate env vars
    validate
    if [[ $? != 0 ]]; then 
        echo "validation failed. exiting now." >&2
        exit 1
    fi

    # initialize
    #init
    #if [[ $? != 0 ]]; then 
    #    echo "init failed. exiting now." >&2
    #    exit 1
    #fi

    # start
    start 
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi    

    # configure
    #retry 5 5 "configure failed." configure
    #if [[ $? != 0 ]]; then
    #    echo "cannot run configure." >&2
    #    exit 1
    #fi

    # wait
    echo "done. now waiting for services."
    #freq=5; waitForN=-1; killTasks=0 # fail one, ignore (development mode)
    freq=5; waitForN=1; killTasks=1 #fail one, fail all (production mode)
    bgowait -g services $freq $waitForN $killTasks
}

if [[ "$1" == "" ]]; then
    main
else
    exec "$@"
fi
